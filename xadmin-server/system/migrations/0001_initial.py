# Generated by Django 5.1.1 on 2024-09-23 06:50

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import common.core.models
import common.fields.image


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mode_type', models.SmallIntegerField(choices=[(0, 'Or mode'), (1, 'And mode')], default=0,
                                                       help_text='Permission mode, and the mode indicates that the data needs to satisfy each rule in the rule list at the same time, or the mode satisfies any rule',
                                                       verbose_name='Data permission mode')),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated time')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('avatar', common.fields.image.ProcessedImageField(blank=True, null=True,
                                                                   upload_to=common.core.models.upload_directory_path,
                                                                   verbose_name='Avatar')),
                ('nickname', models.CharField(blank=True, max_length=150, verbose_name='Nickname')),
                ('gender', models.IntegerField(choices=[(0, 'Unknown'), (1, 'Male'), (2, 'Female')], default=0,
                                               verbose_name='Gender')),
                ('phone', models.CharField(blank=True, db_index=True, default='', max_length=16, verbose_name='Phone')),
                ('email',
                 models.EmailField(blank=True, db_index=True, default='', max_length=254, verbose_name='Email')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.group',
                                                  verbose_name='groups')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='Modifier')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Userinfo',
                'verbose_name_plural': 'Userinfo',
                'ordering': ('-date_joined',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DataPermission',
            fields=[
                ('mode_type', models.SmallIntegerField(choices=[(0, 'Or mode'), (1, 'And mode')], default=0,
                                                       help_text='Permission mode, and the mode indicates that the data needs to satisfy each rule in the rule list at the same time, or the mode satisfies any rule',
                                                       verbose_name='Data permission mode')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated time')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Name')),
                ('rules', models.JSONField(max_length=10240, verbose_name='Rules')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='Modifier')),
            ],
            options={
                'verbose_name': 'Data permission',
                'verbose_name_plural': 'Data permission',
                'ordering': ('-created_time',),
            },
        ),
        migrations.AddField(
            model_name='userinfo',
            name='rules',
            field=models.ManyToManyField(blank=True, to='system.datapermission', verbose_name='Data permission'),
        ),
        migrations.CreateModel(
            name='DeptInfo',
            fields=[
                ('mode_type', models.SmallIntegerField(choices=[(0, 'Or mode'), (1, 'And mode')], default=0,
                                                       help_text='Permission mode, and the mode indicates that the data needs to satisfy each rule in the rule list at the same time, or the mode satisfies any rule',
                                                       verbose_name='Data permission mode')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated time')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('name', models.CharField(max_length=128, verbose_name='Department name')),
                ('code', models.CharField(max_length=128, unique=True, verbose_name='Department code')),
                ('rank', models.IntegerField(default=99, verbose_name='Rank')),
                ('auto_bind', models.BooleanField(default=False,
                                                  help_text='If the value of the registration parameter channel is consistent with the department code, the user is automatically bound to the department',
                                                  verbose_name='Auto bind')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='Data ownership department')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='Modifier')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                             related_query_name='parent_query', to='system.deptinfo',
                                             verbose_name='Superior department')),
                ('rules',
                 models.ManyToManyField(blank=True, to='system.datapermission', verbose_name='Data permission')),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Department',
                'ordering': ('-rank', '-created_time'),
            },
        ),
        migrations.AddField(
            model_name='datapermission',
            name='dept_belong',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', related_query_name='dept_belong_query', to='system.deptinfo',
                                    verbose_name='Data ownership department'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='dept',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_query_name='dept_query', to='system.deptinfo', verbose_name='Department'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='dept_belong',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', related_query_name='dept_belong_query', to='system.deptinfo',
                                    verbose_name='Data ownership department'),
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated time')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('menu_type',
                 models.SmallIntegerField(choices=[(0, 'Directory'), (1, 'Menu'), (2, 'Permission')], default=0,
                                          verbose_name='Menu type')),
                ('name',
                 models.CharField(max_length=128, unique=True, verbose_name='Component name or permission code')),
                ('rank', models.IntegerField(default=9999, verbose_name='Rank')),
                ('path', models.CharField(max_length=255, verbose_name='Route path or api path')),
                ('component', models.CharField(blank=True, max_length=255, null=True, verbose_name='Component path')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('method', models.CharField(blank=True, choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'),
                                                                 ('DELETE', 'DELETE'), ('PATCH', 'PATCH')],
                                            max_length=10, null=True, verbose_name='Method')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='Data ownership department')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='Modifier')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                             to='system.menu', verbose_name='Parent menu')),
            ],
            options={
                'verbose_name': 'Menu',
                'verbose_name_plural': 'Menu',
                'ordering': ('-created_time',),
            },
        ),
        migrations.AddField(
            model_name='datapermission',
            name='menu',
            field=models.ManyToManyField(blank=True,
                                         help_text='If a menu exists, it only applies to the selected menu permission',
                                         to='system.menu', verbose_name='Menu'),
        ),
        migrations.CreateModel(
            name='MenuMeta',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated time')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Menu title')),
                ('icon', models.CharField(blank=True, max_length=255, null=True, verbose_name='Left icon')),
                ('r_svg_name',
                 models.CharField(blank=True, help_text='Additional icon to the right of menu name', max_length=255,
                                  null=True, verbose_name='Right icon')),
                ('is_show_menu', models.BooleanField(default=True, verbose_name='Show menu')),
                ('is_show_parent', models.BooleanField(default=False, verbose_name='Show parent menu')),
                ('is_keepalive', models.BooleanField(default=True,
                                                     help_text='When enabled, the entire state of the page is saved, and when refreshed, the state is cleared',
                                                     verbose_name='Keepalive')),
                ('frame_url',
                 models.CharField(blank=True, help_text='The embedded iframe link address', max_length=255, null=True,
                                  verbose_name='Iframe URL')),
                ('frame_loading', models.BooleanField(default=False, verbose_name='Iframe loading')),
                ('transition_enter',
                 models.CharField(blank=True, max_length=255, null=True, verbose_name='Enter animation')),
                ('transition_leave',
                 models.CharField(blank=True, max_length=255, null=True, verbose_name='Leave animation')),
                ('is_hidden_tag', models.BooleanField(default=False,
                                                      help_text='The current menu name or custom information is prohibited from being added to the TAB',
                                                      verbose_name='Hidden tag')),
                ('fixed_tag', models.BooleanField(default=False,
                                                  help_text='Whether the current menu name is fixed to the TAB and cannot be closed',
                                                  verbose_name='Fixed tag')),
                ('dynamic_level',
                 models.IntegerField(default=0, help_text='Maximum number of dynamic routes that can be opened',
                                     verbose_name='Dynamic level')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='Data ownership department')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='Modifier')),
            ],
            options={
                'verbose_name': 'Menu meta',
                'verbose_name_plural': 'Menu meta',
                'ordering': ('-created_time',),
            },
        ),
        migrations.AddField(
            model_name='menu',
            name='meta',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='system.menumeta',
                                       verbose_name='Menu meta'),
        ),
        migrations.CreateModel(
            name='ModelLabelField',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated time')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('field_type',
                 models.SmallIntegerField(choices=[(0, 'Role permission'), (1, 'Data permission')], default=1,
                                          verbose_name='Field type')),
                ('name', models.CharField(max_length=128, verbose_name='Model/Field name')),
                ('label', models.CharField(max_length=128, verbose_name='Model/Field label')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='Data ownership department')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='Modifier')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                             to='system.modellabelfield', verbose_name='Parent node')),
            ],
            options={
                'verbose_name': 'Model label field',
                'verbose_name_plural': 'Model label field',
                'ordering': ('-created_time',),
                'unique_together': {('name', 'parent')},
            },
        ),
        migrations.AddField(
            model_name='menu',
            name='model',
            field=models.ManyToManyField(blank=True, to='system.modellabelfield', verbose_name='Model'),
        ),
        migrations.CreateModel(
            name='OperationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated time')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('module', models.CharField(blank=True, max_length=64, null=True, verbose_name='Module')),
                ('path', models.CharField(blank=True, max_length=400, null=True, verbose_name='URL path')),
                ('body', models.TextField(blank=True, null=True, verbose_name='Request body')),
                ('method', models.CharField(blank=True, max_length=8, null=True, verbose_name='Request method')),
                ('ipaddress', models.GenericIPAddressField(blank=True, null=True, verbose_name='IpAddress')),
                ('browser', models.CharField(blank=True, max_length=64, null=True, verbose_name='Browser')),
                ('system', models.CharField(blank=True, max_length=64, null=True, verbose_name='System')),
                ('response_code', models.IntegerField(blank=True, null=True, verbose_name='Response code')),
                ('response_result', models.TextField(blank=True, null=True, verbose_name='Response result')),
                ('status_code', models.IntegerField(blank=True, null=True, verbose_name='Status code')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='Data ownership department')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='Modifier')),
            ],
            options={
                'verbose_name': 'Operation log',
                'verbose_name_plural': 'Operation log',
                'ordering': ('-created_time',),
            },
        ),
        migrations.CreateModel(
            name='SystemConfig',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated time')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('value', models.JSONField(max_length=10240, verbose_name='Config value')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('access', models.BooleanField(default=False, help_text='Allows API interfaces to access this config',
                                               verbose_name='API access')),
                ('key', models.CharField(max_length=255, unique=True, verbose_name='Config name')),
                ('inherit', models.BooleanField(default=False, help_text='Allows users to inherit this config',
                                                verbose_name='User inherit')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='Data ownership department')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='Modifier')),
            ],
            options={
                'verbose_name': 'System config',
                'verbose_name_plural': 'System config',
            },
        ),
        migrations.CreateModel(
            name='UploadFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated time')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('filepath', models.FileField(blank=True, null=True, upload_to=common.core.models.upload_directory_path,
                                              verbose_name='Filepath')),
                ('file_url',
                 models.URLField(blank=True, help_text='Usually an address accessible to the outside Internet',
                                 max_length=255, null=True, verbose_name='Internet URL')),
                ('filename', models.CharField(max_length=255, verbose_name='Filename')),
                ('filesize', models.IntegerField(verbose_name='Filesize')),
                ('mime_type', models.CharField(max_length=255, verbose_name='Mime type')),
                ('md5sum', models.CharField(max_length=36, verbose_name='File md5sum')),
                ('is_tmp', models.BooleanField(default=False,
                                               help_text='Temporary files are automatically cleared by scheduled tasks',
                                               verbose_name='Tmp file')),
                ('is_upload', models.BooleanField(default=False, verbose_name='Upload file')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='Data ownership department')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='Modifier')),
            ],
            options={
                'verbose_name': 'Upload file',
                'verbose_name_plural': 'Upload file',
            },
        ),
        migrations.CreateModel(
            name='UserLoginLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated time')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('status', models.BooleanField(default=True, verbose_name='Login status')),
                ('ipaddress', models.GenericIPAddressField(blank=True, null=True, verbose_name='IpAddress')),
                ('city', models.CharField(blank=True, max_length=254, null=True, verbose_name='Login city')),
                ('browser', models.CharField(blank=True, max_length=64, null=True, verbose_name='Browser')),
                ('system', models.CharField(blank=True, max_length=64, null=True, verbose_name='System')),
                ('agent', models.CharField(blank=True, max_length=128, null=True, verbose_name='Agent')),
                ('login_type', models.SmallIntegerField(
                    choices=[(0, 'Username and password'), (1, 'SMS verification code'), (2, 'Email verification code'),
                             (4, 'Wechat scan code'), (9, 'Unknown')], default=0, verbose_name='Login type')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='Data ownership department')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='Modifier')),
            ],
            options={
                'verbose_name': 'User login log',
                'verbose_name_plural': 'User login log',
                'ordering': ('-created_time',),
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated time')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Role name')),
                ('code', models.CharField(max_length=128, unique=True, verbose_name='Role code')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='Data ownership department')),
                ('menu', models.ManyToManyField(blank=True, to='system.menu', verbose_name='Menu')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='Modifier')),
            ],
            options={
                'verbose_name': 'User role',
                'verbose_name_plural': 'User role',
                'ordering': ('-created_time',),
            },
        ),
        migrations.AddField(
            model_name='deptinfo',
            name='roles',
            field=models.ManyToManyField(blank=True, to='system.userrole', verbose_name='Role permission'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='roles',
            field=models.ManyToManyField(blank=True, to='system.userrole', verbose_name='Role permission'),
        ),
        migrations.CreateModel(
            name='UserPersonalConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated time')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('value', models.JSONField(max_length=10240, verbose_name='Config value')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('access', models.BooleanField(default=False, help_text='Allows API interfaces to access this config',
                                               verbose_name='API access')),
                ('key', models.CharField(max_length=255, verbose_name='Config name')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='Data ownership department')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='Modifier')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL,
                                            verbose_name='User')),
            ],
            options={
                'verbose_name': 'User config',
                'verbose_name_plural': 'User config',
                'unique_together': {('owner', 'key')},
            },
        ),
        migrations.CreateModel(
            name='FieldPermission',
            fields=[
                ('id', models.CharField(max_length=128, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated time')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='Data ownership department')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='Modifier')),
                ('menu',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.menu', verbose_name='Menu')),
                ('field', models.ManyToManyField(blank=True, to='system.modellabelfield', verbose_name='Field')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.userrole',
                                           verbose_name='Role')),
            ],
            options={
                'verbose_name': 'Field permission',
                'verbose_name_plural': 'Field permission',
                'ordering': ('-created_time',),
                'unique_together': {('role', 'menu')},
            },
        ),
    ]
